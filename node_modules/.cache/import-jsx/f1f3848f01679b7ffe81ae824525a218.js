"use strict";

const React = require("react");

const {
  useInput,
  useApp,
  Text,
  Box
} = require("ink"); // const BigText = require("ink-big-text");
// const Gradient = require("ink-gradient");


const CFonts = require('cfonts');

CFonts.say('Snake Deluxe', {
  font: '3d',
  // define the font face
  align: 'left',
  // define text alignment
  colors: ['blue'],
  // define all colors
  background: 'transparent',
  // define the background color, you can also use `backgroundColor` here as key
  letterSpacing: 1,
  // define letter spacing
  lineHeight: 1,
  // define the line height
  space: true,
  // define if the output text should have empty lines on top and on the bottom
  maxLength: '0',
  // define how many character can be on one line
  gradient: false,
  // define your two gradient colors
  independentGradient: false,
  // define if you want to recalculate the gradient for each new line
  transitionGradient: false,
  // define if this is a transition between colors directly
  env: 'node' // define the environment CFonts is being executed in

});

const App = () => {
  const {
    exit
  } = useApp();
  const [x, setX] = React.useState(1);
  const [y, setY] = React.useState(1);
  useInput((input, key) => {
    if (input === "q") {
      exit();
    }

    if (key.leftArrow) {
      setX(Math.max(1, x - 1));
    }

    if (key.rightArrow) {
      setX(Math.min(20, x + 1));
    }

    if (key.upArrow) {
      setY(Math.max(1, y - 1));
    }

    if (key.downArrow) {
      setY(Math.min(10, y + 1));
    }
  });
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column"
  }, /*#__PURE__*/React.createElement(Text, null, "Use arrow keys to move the icon. Press \"q\" to exit."), /*#__PURE__*/React.createElement(Box, {
    height: 12,
    paddingLeft: x,
    paddingTop: y
  }, /*#__PURE__*/React.createElement(Text, null, "\uD83D\uDE01")));
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZUlucHV0IiwidXNlQXBwIiwiVGV4dCIsIkJveCIsIkNGb250cyIsInNheSIsImZvbnQiLCJhbGlnbiIsImNvbG9ycyIsImJhY2tncm91bmQiLCJsZXR0ZXJTcGFjaW5nIiwibGluZUhlaWdodCIsInNwYWNlIiwibWF4TGVuZ3RoIiwiZ3JhZGllbnQiLCJpbmRlcGVuZGVudEdyYWRpZW50IiwidHJhbnNpdGlvbkdyYWRpZW50IiwiZW52IiwiQXBwIiwiZXhpdCIsIngiLCJzZXRYIiwidXNlU3RhdGUiLCJ5Iiwic2V0WSIsImlucHV0Iiwia2V5IiwibGVmdEFycm93IiwiTWF0aCIsIm1heCIsInJpZ2h0QXJyb3ciLCJtaW4iLCJ1cEFycm93IiwiZG93bkFycm93IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLFFBQUY7QUFBWUMsRUFBQUEsTUFBWjtBQUFvQkMsRUFBQUEsSUFBcEI7QUFBMEJDLEVBQUFBO0FBQTFCLElBQWtDSixPQUFPLENBQUMsS0FBRCxDQUEvQyxDLENBQ0E7QUFDQTs7O0FBQ0EsTUFBTUssTUFBTSxHQUFHTCxPQUFPLENBQUMsUUFBRCxDQUF0Qjs7QUFFQUssTUFBTSxDQUFDQyxHQUFQLENBQVcsY0FBWCxFQUEyQjtBQUMxQkMsRUFBQUEsSUFBSSxFQUFFLElBRG9CO0FBQ0Q7QUFDekJDLEVBQUFBLEtBQUssRUFBRSxNQUZtQjtBQUVFO0FBQzVCQyxFQUFBQSxNQUFNLEVBQUUsQ0FBQyxNQUFELENBSGtCO0FBR0E7QUFDMUJDLEVBQUFBLFVBQVUsRUFBRSxhQUpjO0FBSUU7QUFDNUJDLEVBQUFBLGFBQWEsRUFBRSxDQUxXO0FBS0U7QUFDNUJDLEVBQUFBLFVBQVUsRUFBRSxDQU5jO0FBTUU7QUFDNUJDLEVBQUFBLEtBQUssRUFBRSxJQVBtQjtBQU9FO0FBQzVCQyxFQUFBQSxTQUFTLEVBQUUsR0FSZTtBQVFFO0FBQzVCQyxFQUFBQSxRQUFRLEVBQUUsS0FUZ0I7QUFTRTtBQUM1QkMsRUFBQUEsbUJBQW1CLEVBQUUsS0FWSztBQVVFO0FBQzVCQyxFQUFBQSxrQkFBa0IsRUFBRSxLQVhNO0FBV0U7QUFDNUJDLEVBQUFBLEdBQUcsRUFBRSxNQVpxQixDQVlFOztBQVpGLENBQTNCOztBQWVBLE1BQU1DLEdBQUcsR0FBRyxNQUFNO0FBQ2QsUUFBTTtBQUFFQyxJQUFBQTtBQUFGLE1BQVdsQixNQUFNLEVBQXZCO0FBQ0EsUUFBTSxDQUFDbUIsQ0FBRCxFQUFJQyxJQUFKLElBQVl2QixLQUFLLENBQUN3QixRQUFOLENBQWUsQ0FBZixDQUFsQjtBQUNBLFFBQU0sQ0FBQ0MsQ0FBRCxFQUFJQyxJQUFKLElBQVkxQixLQUFLLENBQUN3QixRQUFOLENBQWUsQ0FBZixDQUFsQjtBQUVBdEIsRUFBQUEsUUFBUSxDQUFDLENBQUN5QixLQUFELEVBQVFDLEdBQVIsS0FBZ0I7QUFDckIsUUFBSUQsS0FBSyxLQUFLLEdBQWQsRUFBbUI7QUFDZk4sTUFBQUEsSUFBSTtBQUNQOztBQUVELFFBQUlPLEdBQUcsQ0FBQ0MsU0FBUixFQUFtQjtBQUNmTixNQUFBQSxJQUFJLENBQUNPLElBQUksQ0FBQ0MsR0FBTCxDQUFTLENBQVQsRUFBWVQsQ0FBQyxHQUFHLENBQWhCLENBQUQsQ0FBSjtBQUNIOztBQUVELFFBQUlNLEdBQUcsQ0FBQ0ksVUFBUixFQUFvQjtBQUNoQlQsTUFBQUEsSUFBSSxDQUFDTyxJQUFJLENBQUNHLEdBQUwsQ0FBUyxFQUFULEVBQWFYLENBQUMsR0FBRyxDQUFqQixDQUFELENBQUo7QUFDSDs7QUFFRCxRQUFJTSxHQUFHLENBQUNNLE9BQVIsRUFBaUI7QUFDYlIsTUFBQUEsSUFBSSxDQUFDSSxJQUFJLENBQUNDLEdBQUwsQ0FBUyxDQUFULEVBQVlOLENBQUMsR0FBRyxDQUFoQixDQUFELENBQUo7QUFDSDs7QUFFRCxRQUFJRyxHQUFHLENBQUNPLFNBQVIsRUFBbUI7QUFDZlQsTUFBQUEsSUFBSSxDQUFDSSxJQUFJLENBQUNHLEdBQUwsQ0FBUyxFQUFULEVBQWFSLENBQUMsR0FBRyxDQUFqQixDQUFELENBQUo7QUFDSDtBQUNKLEdBcEJPLENBQVI7QUFzQkEsc0JBQ0ksb0JBQUMsR0FBRDtBQUFLLElBQUEsYUFBYSxFQUFDO0FBQW5CLGtCQUlJLG9CQUFDLElBQUQsZ0VBSkosZUFLSSxvQkFBQyxHQUFEO0FBQUssSUFBQSxNQUFNLEVBQUUsRUFBYjtBQUFpQixJQUFBLFdBQVcsRUFBRUgsQ0FBOUI7QUFBaUMsSUFBQSxVQUFVLEVBQUVHO0FBQTdDLGtCQUNJLG9CQUFDLElBQUQsdUJBREosQ0FMSixDQURKO0FBV0gsQ0F0Q0Q7O0FBd0NBVyxNQUFNLENBQUNDLE9BQVAsR0FBaUJqQixHQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB7IHVzZUlucHV0LCB1c2VBcHAsIFRleHQsIEJveCB9ID0gcmVxdWlyZShcImlua1wiKTtcbi8vIGNvbnN0IEJpZ1RleHQgPSByZXF1aXJlKFwiaW5rLWJpZy10ZXh0XCIpO1xuLy8gY29uc3QgR3JhZGllbnQgPSByZXF1aXJlKFwiaW5rLWdyYWRpZW50XCIpO1xuY29uc3QgQ0ZvbnRzID0gcmVxdWlyZSgnY2ZvbnRzJyk7XG5cbkNGb250cy5zYXkoJ1NuYWtlIERlbHV4ZScsIHtcblx0Zm9udDogJzNkJywgICAgICAgICAgICAgIC8vIGRlZmluZSB0aGUgZm9udCBmYWNlXG5cdGFsaWduOiAnbGVmdCcsICAgICAgICAgICAgICAvLyBkZWZpbmUgdGV4dCBhbGlnbm1lbnRcblx0Y29sb3JzOiBbJ2JsdWUnXSwgICAgICAgICAvLyBkZWZpbmUgYWxsIGNvbG9yc1xuXHRiYWNrZ3JvdW5kOiAndHJhbnNwYXJlbnQnLCAgLy8gZGVmaW5lIHRoZSBiYWNrZ3JvdW5kIGNvbG9yLCB5b3UgY2FuIGFsc28gdXNlIGBiYWNrZ3JvdW5kQ29sb3JgIGhlcmUgYXMga2V5XG5cdGxldHRlclNwYWNpbmc6IDEsICAgICAgICAgICAvLyBkZWZpbmUgbGV0dGVyIHNwYWNpbmdcblx0bGluZUhlaWdodDogMSwgICAgICAgICAgICAgIC8vIGRlZmluZSB0aGUgbGluZSBoZWlnaHRcblx0c3BhY2U6IHRydWUsICAgICAgICAgICAgICAgIC8vIGRlZmluZSBpZiB0aGUgb3V0cHV0IHRleHQgc2hvdWxkIGhhdmUgZW1wdHkgbGluZXMgb24gdG9wIGFuZCBvbiB0aGUgYm90dG9tXG5cdG1heExlbmd0aDogJzAnLCAgICAgICAgICAgICAvLyBkZWZpbmUgaG93IG1hbnkgY2hhcmFjdGVyIGNhbiBiZSBvbiBvbmUgbGluZVxuXHRncmFkaWVudDogZmFsc2UsICAgICAgICAgICAgLy8gZGVmaW5lIHlvdXIgdHdvIGdyYWRpZW50IGNvbG9yc1xuXHRpbmRlcGVuZGVudEdyYWRpZW50OiBmYWxzZSwgLy8gZGVmaW5lIGlmIHlvdSB3YW50IHRvIHJlY2FsY3VsYXRlIHRoZSBncmFkaWVudCBmb3IgZWFjaCBuZXcgbGluZVxuXHR0cmFuc2l0aW9uR3JhZGllbnQ6IGZhbHNlLCAgLy8gZGVmaW5lIGlmIHRoaXMgaXMgYSB0cmFuc2l0aW9uIGJldHdlZW4gY29sb3JzIGRpcmVjdGx5XG5cdGVudjogJ25vZGUnICAgICAgICAgICAgICAgICAvLyBkZWZpbmUgdGhlIGVudmlyb25tZW50IENGb250cyBpcyBiZWluZyBleGVjdXRlZCBpblxufSk7XG5cbmNvbnN0IEFwcCA9ICgpID0+IHtcbiAgICBjb25zdCB7IGV4aXQgfSA9IHVzZUFwcCgpO1xuICAgIGNvbnN0IFt4LCBzZXRYXSA9IFJlYWN0LnVzZVN0YXRlKDEpO1xuICAgIGNvbnN0IFt5LCBzZXRZXSA9IFJlYWN0LnVzZVN0YXRlKDEpO1xuXG4gICAgdXNlSW5wdXQoKGlucHV0LCBrZXkpID0+IHtcbiAgICAgICAgaWYgKGlucHV0ID09PSBcInFcIikge1xuICAgICAgICAgICAgZXhpdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGtleS5sZWZ0QXJyb3cpIHtcbiAgICAgICAgICAgIHNldFgoTWF0aC5tYXgoMSwgeCAtIDEpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChrZXkucmlnaHRBcnJvdykge1xuICAgICAgICAgICAgc2V0WChNYXRoLm1pbigyMCwgeCArIDEpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChrZXkudXBBcnJvdykge1xuICAgICAgICAgICAgc2V0WShNYXRoLm1heCgxLCB5IC0gMSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGtleS5kb3duQXJyb3cpIHtcbiAgICAgICAgICAgIHNldFkoTWF0aC5taW4oMTAsIHkgKyAxKSk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxCb3ggZmxleERpcmVjdGlvbj1cImNvbHVtblwiPlxuXHRcdFx0ey8qIDxHcmFkaWVudCBuYW1lPVwicmFpbmJvd1wiPlxuXHRcdFx0XHQ8QmlnVGV4dCB0ZXh0PVwic25ha2UgZGVsdXhlXCIvPlxuXHRcdFx0PC9HcmFkaWVudD4gKi99XG4gICAgICAgICAgICA8VGV4dD5Vc2UgYXJyb3cga2V5cyB0byBtb3ZlIHRoZSBpY29uLiBQcmVzcyBcInFcIiB0byBleGl0LjwvVGV4dD5cbiAgICAgICAgICAgIDxCb3ggaGVpZ2h0PXsxMn0gcGFkZGluZ0xlZnQ9e3h9IHBhZGRpbmdUb3A9e3l9PlxuICAgICAgICAgICAgICAgIDxUZXh0PvCfmIE8L1RleHQ+XG4gICAgICAgICAgICA8L0JveD5cbiAgICAgICAgPC9Cb3g+XG4gICAgKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuIl19