"use strict";

const React = require("react");

const {
  useInput,
  useApp,
  Text,
  Box
} = require("ink"); // const BigText = require("ink-big-text");
// const Gradient = require("ink-gradient");


const CFonts = require('cfonts');

CFonts.say('Snake Deluxe', {
  font: 'shade',
  // define the font face
  align: 'left',
  // define text alignment
  colors: ['system'],
  // define all colors
  background: 'transparent',
  // define the background color, you can also use `backgroundColor` here as key
  letterSpacing: 1,
  // define letter spacing
  lineHeight: 1,
  // define the line height
  space: true,
  // define if the output text should have empty lines on top and on the bottom
  maxLength: '0',
  // define how many character can be on one line
  gradient: false,
  // define your two gradient colors
  independentGradient: false,
  // define if you want to recalculate the gradient for each new line
  transitionGradient: false,
  // define if this is a transition between colors directly
  env: 'node' // define the environment CFonts is being executed in

});

const App = () => {
  const {
    exit
  } = useApp();
  const [x, setX] = React.useState(1);
  const [y, setY] = React.useState(1);
  useInput((input, key) => {
    if (input === "q") {
      exit();
    }

    if (key.leftArrow) {
      setX(Math.max(1, x - 1));
    }

    if (key.rightArrow) {
      setX(Math.min(20, x + 1));
    }

    if (key.upArrow) {
      setY(Math.max(1, y - 1));
    }

    if (key.downArrow) {
      setY(Math.min(10, y + 1));
    }
  });
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column"
  }, /*#__PURE__*/React.createElement(Text, null, "Use arrow keys to move the icon. Press \"q\" to exit."), /*#__PURE__*/React.createElement(Box, {
    height: 12,
    paddingLeft: x,
    paddingTop: y
  }, /*#__PURE__*/React.createElement(Text, null, "\uD83D\uDE01")));
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZUlucHV0IiwidXNlQXBwIiwiVGV4dCIsIkJveCIsIkNGb250cyIsInNheSIsImZvbnQiLCJhbGlnbiIsImNvbG9ycyIsImJhY2tncm91bmQiLCJsZXR0ZXJTcGFjaW5nIiwibGluZUhlaWdodCIsInNwYWNlIiwibWF4TGVuZ3RoIiwiZ3JhZGllbnQiLCJpbmRlcGVuZGVudEdyYWRpZW50IiwidHJhbnNpdGlvbkdyYWRpZW50IiwiZW52IiwiQXBwIiwiZXhpdCIsIngiLCJzZXRYIiwidXNlU3RhdGUiLCJ5Iiwic2V0WSIsImlucHV0Iiwia2V5IiwibGVmdEFycm93IiwiTWF0aCIsIm1heCIsInJpZ2h0QXJyb3ciLCJtaW4iLCJ1cEFycm93IiwiZG93bkFycm93IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLFFBQUY7QUFBWUMsRUFBQUEsTUFBWjtBQUFvQkMsRUFBQUEsSUFBcEI7QUFBMEJDLEVBQUFBO0FBQTFCLElBQWtDSixPQUFPLENBQUMsS0FBRCxDQUEvQyxDLENBQ0E7QUFDQTs7O0FBQ0EsTUFBTUssTUFBTSxHQUFHTCxPQUFPLENBQUMsUUFBRCxDQUF0Qjs7QUFFQUssTUFBTSxDQUFDQyxHQUFQLENBQVcsY0FBWCxFQUEyQjtBQUMxQkMsRUFBQUEsSUFBSSxFQUFFLE9BRG9CO0FBQ0U7QUFDNUJDLEVBQUFBLEtBQUssRUFBRSxNQUZtQjtBQUVFO0FBQzVCQyxFQUFBQSxNQUFNLEVBQUUsQ0FBQyxRQUFELENBSGtCO0FBR0U7QUFDNUJDLEVBQUFBLFVBQVUsRUFBRSxhQUpjO0FBSUU7QUFDNUJDLEVBQUFBLGFBQWEsRUFBRSxDQUxXO0FBS0U7QUFDNUJDLEVBQUFBLFVBQVUsRUFBRSxDQU5jO0FBTUU7QUFDNUJDLEVBQUFBLEtBQUssRUFBRSxJQVBtQjtBQU9FO0FBQzVCQyxFQUFBQSxTQUFTLEVBQUUsR0FSZTtBQVFFO0FBQzVCQyxFQUFBQSxRQUFRLEVBQUUsS0FUZ0I7QUFTRTtBQUM1QkMsRUFBQUEsbUJBQW1CLEVBQUUsS0FWSztBQVVFO0FBQzVCQyxFQUFBQSxrQkFBa0IsRUFBRSxLQVhNO0FBV0U7QUFDNUJDLEVBQUFBLEdBQUcsRUFBRSxNQVpxQixDQVlFOztBQVpGLENBQTNCOztBQWVBLE1BQU1DLEdBQUcsR0FBRyxNQUFNO0FBQ2QsUUFBTTtBQUFFQyxJQUFBQTtBQUFGLE1BQVdsQixNQUFNLEVBQXZCO0FBQ0EsUUFBTSxDQUFDbUIsQ0FBRCxFQUFJQyxJQUFKLElBQVl2QixLQUFLLENBQUN3QixRQUFOLENBQWUsQ0FBZixDQUFsQjtBQUNBLFFBQU0sQ0FBQ0MsQ0FBRCxFQUFJQyxJQUFKLElBQVkxQixLQUFLLENBQUN3QixRQUFOLENBQWUsQ0FBZixDQUFsQjtBQUVBdEIsRUFBQUEsUUFBUSxDQUFDLENBQUN5QixLQUFELEVBQVFDLEdBQVIsS0FBZ0I7QUFDckIsUUFBSUQsS0FBSyxLQUFLLEdBQWQsRUFBbUI7QUFDZk4sTUFBQUEsSUFBSTtBQUNQOztBQUVELFFBQUlPLEdBQUcsQ0FBQ0MsU0FBUixFQUFtQjtBQUNmTixNQUFBQSxJQUFJLENBQUNPLElBQUksQ0FBQ0MsR0FBTCxDQUFTLENBQVQsRUFBWVQsQ0FBQyxHQUFHLENBQWhCLENBQUQsQ0FBSjtBQUNIOztBQUVELFFBQUlNLEdBQUcsQ0FBQ0ksVUFBUixFQUFvQjtBQUNoQlQsTUFBQUEsSUFBSSxDQUFDTyxJQUFJLENBQUNHLEdBQUwsQ0FBUyxFQUFULEVBQWFYLENBQUMsR0FBRyxDQUFqQixDQUFELENBQUo7QUFDSDs7QUFFRCxRQUFJTSxHQUFHLENBQUNNLE9BQVIsRUFBaUI7QUFDYlIsTUFBQUEsSUFBSSxDQUFDSSxJQUFJLENBQUNDLEdBQUwsQ0FBUyxDQUFULEVBQVlOLENBQUMsR0FBRyxDQUFoQixDQUFELENBQUo7QUFDSDs7QUFFRCxRQUFJRyxHQUFHLENBQUNPLFNBQVIsRUFBbUI7QUFDZlQsTUFBQUEsSUFBSSxDQUFDSSxJQUFJLENBQUNHLEdBQUwsQ0FBUyxFQUFULEVBQWFSLENBQUMsR0FBRyxDQUFqQixDQUFELENBQUo7QUFDSDtBQUNKLEdBcEJPLENBQVI7QUFzQkEsc0JBQ0ksb0JBQUMsR0FBRDtBQUFLLElBQUEsYUFBYSxFQUFDO0FBQW5CLGtCQUlJLG9CQUFDLElBQUQsZ0VBSkosZUFLSSxvQkFBQyxHQUFEO0FBQUssSUFBQSxNQUFNLEVBQUUsRUFBYjtBQUFpQixJQUFBLFdBQVcsRUFBRUgsQ0FBOUI7QUFBaUMsSUFBQSxVQUFVLEVBQUVHO0FBQTdDLGtCQUNJLG9CQUFDLElBQUQsdUJBREosQ0FMSixDQURKO0FBV0gsQ0F0Q0Q7O0FBd0NBVyxNQUFNLENBQUNDLE9BQVAsR0FBaUJqQixHQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB7IHVzZUlucHV0LCB1c2VBcHAsIFRleHQsIEJveCB9ID0gcmVxdWlyZShcImlua1wiKTtcbi8vIGNvbnN0IEJpZ1RleHQgPSByZXF1aXJlKFwiaW5rLWJpZy10ZXh0XCIpO1xuLy8gY29uc3QgR3JhZGllbnQgPSByZXF1aXJlKFwiaW5rLWdyYWRpZW50XCIpO1xuY29uc3QgQ0ZvbnRzID0gcmVxdWlyZSgnY2ZvbnRzJyk7XG5cbkNGb250cy5zYXkoJ1NuYWtlIERlbHV4ZScsIHtcblx0Zm9udDogJ3NoYWRlJywgICAgICAgICAgICAgIC8vIGRlZmluZSB0aGUgZm9udCBmYWNlXG5cdGFsaWduOiAnbGVmdCcsICAgICAgICAgICAgICAvLyBkZWZpbmUgdGV4dCBhbGlnbm1lbnRcblx0Y29sb3JzOiBbJ3N5c3RlbSddLCAgICAgICAgIC8vIGRlZmluZSBhbGwgY29sb3JzXG5cdGJhY2tncm91bmQ6ICd0cmFuc3BhcmVudCcsICAvLyBkZWZpbmUgdGhlIGJhY2tncm91bmQgY29sb3IsIHlvdSBjYW4gYWxzbyB1c2UgYGJhY2tncm91bmRDb2xvcmAgaGVyZSBhcyBrZXlcblx0bGV0dGVyU3BhY2luZzogMSwgICAgICAgICAgIC8vIGRlZmluZSBsZXR0ZXIgc3BhY2luZ1xuXHRsaW5lSGVpZ2h0OiAxLCAgICAgICAgICAgICAgLy8gZGVmaW5lIHRoZSBsaW5lIGhlaWdodFxuXHRzcGFjZTogdHJ1ZSwgICAgICAgICAgICAgICAgLy8gZGVmaW5lIGlmIHRoZSBvdXRwdXQgdGV4dCBzaG91bGQgaGF2ZSBlbXB0eSBsaW5lcyBvbiB0b3AgYW5kIG9uIHRoZSBib3R0b21cblx0bWF4TGVuZ3RoOiAnMCcsICAgICAgICAgICAgIC8vIGRlZmluZSBob3cgbWFueSBjaGFyYWN0ZXIgY2FuIGJlIG9uIG9uZSBsaW5lXG5cdGdyYWRpZW50OiBmYWxzZSwgICAgICAgICAgICAvLyBkZWZpbmUgeW91ciB0d28gZ3JhZGllbnQgY29sb3JzXG5cdGluZGVwZW5kZW50R3JhZGllbnQ6IGZhbHNlLCAvLyBkZWZpbmUgaWYgeW91IHdhbnQgdG8gcmVjYWxjdWxhdGUgdGhlIGdyYWRpZW50IGZvciBlYWNoIG5ldyBsaW5lXG5cdHRyYW5zaXRpb25HcmFkaWVudDogZmFsc2UsICAvLyBkZWZpbmUgaWYgdGhpcyBpcyBhIHRyYW5zaXRpb24gYmV0d2VlbiBjb2xvcnMgZGlyZWN0bHlcblx0ZW52OiAnbm9kZScgICAgICAgICAgICAgICAgIC8vIGRlZmluZSB0aGUgZW52aXJvbm1lbnQgQ0ZvbnRzIGlzIGJlaW5nIGV4ZWN1dGVkIGluXG59KTtcblxuY29uc3QgQXBwID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgZXhpdCB9ID0gdXNlQXBwKCk7XG4gICAgY29uc3QgW3gsIHNldFhdID0gUmVhY3QudXNlU3RhdGUoMSk7XG4gICAgY29uc3QgW3ksIHNldFldID0gUmVhY3QudXNlU3RhdGUoMSk7XG5cbiAgICB1c2VJbnB1dCgoaW5wdXQsIGtleSkgPT4ge1xuICAgICAgICBpZiAoaW5wdXQgPT09IFwicVwiKSB7XG4gICAgICAgICAgICBleGl0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoa2V5LmxlZnRBcnJvdykge1xuICAgICAgICAgICAgc2V0WChNYXRoLm1heCgxLCB4IC0gMSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGtleS5yaWdodEFycm93KSB7XG4gICAgICAgICAgICBzZXRYKE1hdGgubWluKDIwLCB4ICsgMSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGtleS51cEFycm93KSB7XG4gICAgICAgICAgICBzZXRZKE1hdGgubWF4KDEsIHkgLSAxKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoa2V5LmRvd25BcnJvdykge1xuICAgICAgICAgICAgc2V0WShNYXRoLm1pbigxMCwgeSArIDEpKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPEJveCBmbGV4RGlyZWN0aW9uPVwiY29sdW1uXCI+XG5cdFx0XHR7LyogPEdyYWRpZW50IG5hbWU9XCJyYWluYm93XCI+XG5cdFx0XHRcdDxCaWdUZXh0IHRleHQ9XCJzbmFrZSBkZWx1eGVcIi8+XG5cdFx0XHQ8L0dyYWRpZW50PiAqL31cbiAgICAgICAgICAgIDxUZXh0PlVzZSBhcnJvdyBrZXlzIHRvIG1vdmUgdGhlIGljb24uIFByZXNzIFwicVwiIHRvIGV4aXQuPC9UZXh0PlxuICAgICAgICAgICAgPEJveCBoZWlnaHQ9ezEyfSBwYWRkaW5nTGVmdD17eH0gcGFkZGluZ1RvcD17eX0+XG4gICAgICAgICAgICAgICAgPFRleHQ+8J+YgTwvVGV4dD5cbiAgICAgICAgICAgIDwvQm94PlxuICAgICAgICA8L0JveD5cbiAgICApO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG4iXX0=