"use strict";

const React = require("react");

const {
  useInput,
  useApp,
  Text,
  Box
} = require("ink"); // const BigText = require("ink-big-text");
// const Gradient = require("ink-gradient");


const CFonts = require('cfonts');

CFonts.say('Snake Deluxe', {
  font: 'shade',
  // define the font face
  align: 'left',
  // define text alignment
  colors: ['red'],
  // define all colors
  background: 'transparent',
  // define the background color, you can also use `backgroundColor` here as key
  letterSpacing: 1,
  // define letter spacing
  lineHeight: 1,
  // define the line height
  space: true,
  // define if the output text should have empty lines on top and on the bottom
  maxLength: '0',
  // define how many character can be on one line
  gradient: ['red', 'blue'],
  // define your two gradient colors
  independentGradient: false,
  // define if you want to recalculate the gradient for each new line
  transitionGradient: false,
  // define if this is a transition between colors directly
  env: 'node' // define the environment CFonts is being executed in

});

const App = () => {
  const {
    exit
  } = useApp();
  const [x, setX] = React.useState(1);
  const [y, setY] = React.useState(1);
  useInput((input, key) => {
    if (input === "q") {
      exit();
    }

    if (key.leftArrow) {
      setX(Math.max(1, x - 1));
    }

    if (key.rightArrow) {
      setX(Math.min(20, x + 1));
    }

    if (key.upArrow) {
      setY(Math.max(1, y - 1));
    }

    if (key.downArrow) {
      setY(Math.min(10, y + 1));
    }
  });
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column"
  }, /*#__PURE__*/React.createElement(Text, null, "Use arrow keys to move the icon. Press \"q\" to exit."), /*#__PURE__*/React.createElement(Box, {
    height: 12,
    paddingLeft: x,
    paddingTop: y
  }, /*#__PURE__*/React.createElement(Text, null, "\uD83D\uDE01")));
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZUlucHV0IiwidXNlQXBwIiwiVGV4dCIsIkJveCIsIkNGb250cyIsInNheSIsImZvbnQiLCJhbGlnbiIsImNvbG9ycyIsImJhY2tncm91bmQiLCJsZXR0ZXJTcGFjaW5nIiwibGluZUhlaWdodCIsInNwYWNlIiwibWF4TGVuZ3RoIiwiZ3JhZGllbnQiLCJpbmRlcGVuZGVudEdyYWRpZW50IiwidHJhbnNpdGlvbkdyYWRpZW50IiwiZW52IiwiQXBwIiwiZXhpdCIsIngiLCJzZXRYIiwidXNlU3RhdGUiLCJ5Iiwic2V0WSIsImlucHV0Iiwia2V5IiwibGVmdEFycm93IiwiTWF0aCIsIm1heCIsInJpZ2h0QXJyb3ciLCJtaW4iLCJ1cEFycm93IiwiZG93bkFycm93IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLFFBQUY7QUFBWUMsRUFBQUEsTUFBWjtBQUFvQkMsRUFBQUEsSUFBcEI7QUFBMEJDLEVBQUFBO0FBQTFCLElBQWtDSixPQUFPLENBQUMsS0FBRCxDQUEvQyxDLENBQ0E7QUFDQTs7O0FBQ0EsTUFBTUssTUFBTSxHQUFHTCxPQUFPLENBQUMsUUFBRCxDQUF0Qjs7QUFFQUssTUFBTSxDQUFDQyxHQUFQLENBQVcsY0FBWCxFQUEyQjtBQUMxQkMsRUFBQUEsSUFBSSxFQUFFLE9BRG9CO0FBQ0U7QUFDNUJDLEVBQUFBLEtBQUssRUFBRSxNQUZtQjtBQUVFO0FBQzVCQyxFQUFBQSxNQUFNLEVBQUUsQ0FBQyxLQUFELENBSGtCO0FBR0Q7QUFDekJDLEVBQUFBLFVBQVUsRUFBRSxhQUpjO0FBSUU7QUFDNUJDLEVBQUFBLGFBQWEsRUFBRSxDQUxXO0FBS0U7QUFDNUJDLEVBQUFBLFVBQVUsRUFBRSxDQU5jO0FBTUU7QUFDNUJDLEVBQUFBLEtBQUssRUFBRSxJQVBtQjtBQU9FO0FBQzVCQyxFQUFBQSxTQUFTLEVBQUUsR0FSZTtBQVFFO0FBQzVCQyxFQUFBQSxRQUFRLEVBQUUsQ0FBQyxLQUFELEVBQVEsTUFBUixDQVRnQjtBQVNZO0FBQ3RDQyxFQUFBQSxtQkFBbUIsRUFBRSxLQVZLO0FBVUU7QUFDNUJDLEVBQUFBLGtCQUFrQixFQUFFLEtBWE07QUFXRTtBQUM1QkMsRUFBQUEsR0FBRyxFQUFFLE1BWnFCLENBWUU7O0FBWkYsQ0FBM0I7O0FBZUEsTUFBTUMsR0FBRyxHQUFHLE1BQU07QUFDZCxRQUFNO0FBQUVDLElBQUFBO0FBQUYsTUFBV2xCLE1BQU0sRUFBdkI7QUFDQSxRQUFNLENBQUNtQixDQUFELEVBQUlDLElBQUosSUFBWXZCLEtBQUssQ0FBQ3dCLFFBQU4sQ0FBZSxDQUFmLENBQWxCO0FBQ0EsUUFBTSxDQUFDQyxDQUFELEVBQUlDLElBQUosSUFBWTFCLEtBQUssQ0FBQ3dCLFFBQU4sQ0FBZSxDQUFmLENBQWxCO0FBRUF0QixFQUFBQSxRQUFRLENBQUMsQ0FBQ3lCLEtBQUQsRUFBUUMsR0FBUixLQUFnQjtBQUNyQixRQUFJRCxLQUFLLEtBQUssR0FBZCxFQUFtQjtBQUNmTixNQUFBQSxJQUFJO0FBQ1A7O0FBRUQsUUFBSU8sR0FBRyxDQUFDQyxTQUFSLEVBQW1CO0FBQ2ZOLE1BQUFBLElBQUksQ0FBQ08sSUFBSSxDQUFDQyxHQUFMLENBQVMsQ0FBVCxFQUFZVCxDQUFDLEdBQUcsQ0FBaEIsQ0FBRCxDQUFKO0FBQ0g7O0FBRUQsUUFBSU0sR0FBRyxDQUFDSSxVQUFSLEVBQW9CO0FBQ2hCVCxNQUFBQSxJQUFJLENBQUNPLElBQUksQ0FBQ0csR0FBTCxDQUFTLEVBQVQsRUFBYVgsQ0FBQyxHQUFHLENBQWpCLENBQUQsQ0FBSjtBQUNIOztBQUVELFFBQUlNLEdBQUcsQ0FBQ00sT0FBUixFQUFpQjtBQUNiUixNQUFBQSxJQUFJLENBQUNJLElBQUksQ0FBQ0MsR0FBTCxDQUFTLENBQVQsRUFBWU4sQ0FBQyxHQUFHLENBQWhCLENBQUQsQ0FBSjtBQUNIOztBQUVELFFBQUlHLEdBQUcsQ0FBQ08sU0FBUixFQUFtQjtBQUNmVCxNQUFBQSxJQUFJLENBQUNJLElBQUksQ0FBQ0csR0FBTCxDQUFTLEVBQVQsRUFBYVIsQ0FBQyxHQUFHLENBQWpCLENBQUQsQ0FBSjtBQUNIO0FBQ0osR0FwQk8sQ0FBUjtBQXNCQSxzQkFDSSxvQkFBQyxHQUFEO0FBQUssSUFBQSxhQUFhLEVBQUM7QUFBbkIsa0JBSUksb0JBQUMsSUFBRCxnRUFKSixlQUtJLG9CQUFDLEdBQUQ7QUFBSyxJQUFBLE1BQU0sRUFBRSxFQUFiO0FBQWlCLElBQUEsV0FBVyxFQUFFSCxDQUE5QjtBQUFpQyxJQUFBLFVBQVUsRUFBRUc7QUFBN0Msa0JBQ0ksb0JBQUMsSUFBRCx1QkFESixDQUxKLENBREo7QUFXSCxDQXRDRDs7QUF3Q0FXLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmpCLEdBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmNvbnN0IHsgdXNlSW5wdXQsIHVzZUFwcCwgVGV4dCwgQm94IH0gPSByZXF1aXJlKFwiaW5rXCIpO1xuLy8gY29uc3QgQmlnVGV4dCA9IHJlcXVpcmUoXCJpbmstYmlnLXRleHRcIik7XG4vLyBjb25zdCBHcmFkaWVudCA9IHJlcXVpcmUoXCJpbmstZ3JhZGllbnRcIik7XG5jb25zdCBDRm9udHMgPSByZXF1aXJlKCdjZm9udHMnKTtcblxuQ0ZvbnRzLnNheSgnU25ha2UgRGVsdXhlJywge1xuXHRmb250OiAnc2hhZGUnLCAgICAgICAgICAgICAgLy8gZGVmaW5lIHRoZSBmb250IGZhY2Vcblx0YWxpZ246ICdsZWZ0JywgICAgICAgICAgICAgIC8vIGRlZmluZSB0ZXh0IGFsaWdubWVudFxuXHRjb2xvcnM6IFsncmVkJ10sICAgICAgICAgLy8gZGVmaW5lIGFsbCBjb2xvcnNcblx0YmFja2dyb3VuZDogJ3RyYW5zcGFyZW50JywgIC8vIGRlZmluZSB0aGUgYmFja2dyb3VuZCBjb2xvciwgeW91IGNhbiBhbHNvIHVzZSBgYmFja2dyb3VuZENvbG9yYCBoZXJlIGFzIGtleVxuXHRsZXR0ZXJTcGFjaW5nOiAxLCAgICAgICAgICAgLy8gZGVmaW5lIGxldHRlciBzcGFjaW5nXG5cdGxpbmVIZWlnaHQ6IDEsICAgICAgICAgICAgICAvLyBkZWZpbmUgdGhlIGxpbmUgaGVpZ2h0XG5cdHNwYWNlOiB0cnVlLCAgICAgICAgICAgICAgICAvLyBkZWZpbmUgaWYgdGhlIG91dHB1dCB0ZXh0IHNob3VsZCBoYXZlIGVtcHR5IGxpbmVzIG9uIHRvcCBhbmQgb24gdGhlIGJvdHRvbVxuXHRtYXhMZW5ndGg6ICcwJywgICAgICAgICAgICAgLy8gZGVmaW5lIGhvdyBtYW55IGNoYXJhY3RlciBjYW4gYmUgb24gb25lIGxpbmVcblx0Z3JhZGllbnQ6IFsncmVkJywgJ2JsdWUnXSwgICAgICAgICAgICAvLyBkZWZpbmUgeW91ciB0d28gZ3JhZGllbnQgY29sb3JzXG5cdGluZGVwZW5kZW50R3JhZGllbnQ6IGZhbHNlLCAvLyBkZWZpbmUgaWYgeW91IHdhbnQgdG8gcmVjYWxjdWxhdGUgdGhlIGdyYWRpZW50IGZvciBlYWNoIG5ldyBsaW5lXG5cdHRyYW5zaXRpb25HcmFkaWVudDogZmFsc2UsICAvLyBkZWZpbmUgaWYgdGhpcyBpcyBhIHRyYW5zaXRpb24gYmV0d2VlbiBjb2xvcnMgZGlyZWN0bHlcblx0ZW52OiAnbm9kZScgICAgICAgICAgICAgICAgIC8vIGRlZmluZSB0aGUgZW52aXJvbm1lbnQgQ0ZvbnRzIGlzIGJlaW5nIGV4ZWN1dGVkIGluXG59KTtcblxuY29uc3QgQXBwID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgZXhpdCB9ID0gdXNlQXBwKCk7XG4gICAgY29uc3QgW3gsIHNldFhdID0gUmVhY3QudXNlU3RhdGUoMSk7XG4gICAgY29uc3QgW3ksIHNldFldID0gUmVhY3QudXNlU3RhdGUoMSk7XG5cbiAgICB1c2VJbnB1dCgoaW5wdXQsIGtleSkgPT4ge1xuICAgICAgICBpZiAoaW5wdXQgPT09IFwicVwiKSB7XG4gICAgICAgICAgICBleGl0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoa2V5LmxlZnRBcnJvdykge1xuICAgICAgICAgICAgc2V0WChNYXRoLm1heCgxLCB4IC0gMSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGtleS5yaWdodEFycm93KSB7XG4gICAgICAgICAgICBzZXRYKE1hdGgubWluKDIwLCB4ICsgMSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGtleS51cEFycm93KSB7XG4gICAgICAgICAgICBzZXRZKE1hdGgubWF4KDEsIHkgLSAxKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoa2V5LmRvd25BcnJvdykge1xuICAgICAgICAgICAgc2V0WShNYXRoLm1pbigxMCwgeSArIDEpKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPEJveCBmbGV4RGlyZWN0aW9uPVwiY29sdW1uXCI+XG5cdFx0XHR7LyogPEdyYWRpZW50IG5hbWU9XCJyYWluYm93XCI+XG5cdFx0XHRcdDxCaWdUZXh0IHRleHQ9XCJzbmFrZSBkZWx1eGVcIi8+XG5cdFx0XHQ8L0dyYWRpZW50PiAqL31cbiAgICAgICAgICAgIDxUZXh0PlVzZSBhcnJvdyBrZXlzIHRvIG1vdmUgdGhlIGljb24uIFByZXNzIFwicVwiIHRvIGV4aXQuPC9UZXh0PlxuICAgICAgICAgICAgPEJveCBoZWlnaHQ9ezEyfSBwYWRkaW5nTGVmdD17eH0gcGFkZGluZ1RvcD17eX0+XG4gICAgICAgICAgICAgICAgPFRleHQ+8J+YgTwvVGV4dD5cbiAgICAgICAgICAgIDwvQm94PlxuICAgICAgICA8L0JveD5cbiAgICApO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG4iXX0=