"use strict";

const React = require("react");

const {
  useInput,
  useApp,
  Text,
  Box
} = require("ink"); // const BigText = require("ink-big-text");
// const Gradient = require("ink-gradient");


const CFonts = require('cfonts');

CFonts.say('Snake Deluxe', {
  font: 'tiny',
  // define the font face
  align: 'left',
  // define text alignment
  colors: ['red'],
  // define all colors
  background: 'transparent',
  // define the background color, you can also use `backgroundColor` here as key
  letterSpacing: 1,
  // define letter spacing
  lineHeight: 4,
  // define the line height
  space: true,
  // define if the output text should have empty lines on top and on the bottom
  maxLength: '0',
  // define how many character can be on one line
  gradient: ['red', 'blue'],
  // define your two gradient colors
  independentGradient: false,
  // define if you want to recalculate the gradient for each new line
  transitionGradient: false,
  // define if this is a transition between colors directly
  env: 'node' // define the environment CFonts is being executed in

});

const App = () => {
  const {
    exit
  } = useApp();
  const [x, setX] = React.useState(1);
  const [y, setY] = React.useState(1);
  useInput((input, key) => {
    if (input === "q") {
      exit();
    }

    if (key.leftArrow) {
      setX(Math.max(1, x - 1));
    }

    if (key.rightArrow) {
      setX(Math.min(20, x + 1));
    }

    if (key.upArrow) {
      setY(Math.max(1, y - 1));
    }

    if (key.downArrow) {
      setY(Math.min(10, y + 1));
    }
  });
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column"
  }, /*#__PURE__*/React.createElement(Text, null, "Use arrow keys to move the icon. Press \"q\" to exit."), /*#__PURE__*/React.createElement(Box, {
    height: 12,
    paddingLeft: x,
    paddingTop: y
  }, /*#__PURE__*/React.createElement(Text, null, "\uD83D\uDE01")));
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZUlucHV0IiwidXNlQXBwIiwiVGV4dCIsIkJveCIsIkNGb250cyIsInNheSIsImZvbnQiLCJhbGlnbiIsImNvbG9ycyIsImJhY2tncm91bmQiLCJsZXR0ZXJTcGFjaW5nIiwibGluZUhlaWdodCIsInNwYWNlIiwibWF4TGVuZ3RoIiwiZ3JhZGllbnQiLCJpbmRlcGVuZGVudEdyYWRpZW50IiwidHJhbnNpdGlvbkdyYWRpZW50IiwiZW52IiwiQXBwIiwiZXhpdCIsIngiLCJzZXRYIiwidXNlU3RhdGUiLCJ5Iiwic2V0WSIsImlucHV0Iiwia2V5IiwibGVmdEFycm93IiwiTWF0aCIsIm1heCIsInJpZ2h0QXJyb3ciLCJtaW4iLCJ1cEFycm93IiwiZG93bkFycm93IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLFFBQUY7QUFBWUMsRUFBQUEsTUFBWjtBQUFvQkMsRUFBQUEsSUFBcEI7QUFBMEJDLEVBQUFBO0FBQTFCLElBQWtDSixPQUFPLENBQUMsS0FBRCxDQUEvQyxDLENBQ0E7QUFDQTs7O0FBQ0EsTUFBTUssTUFBTSxHQUFHTCxPQUFPLENBQUMsUUFBRCxDQUF0Qjs7QUFFQUssTUFBTSxDQUFDQyxHQUFQLENBQVcsY0FBWCxFQUEyQjtBQUMxQkMsRUFBQUEsSUFBSSxFQUFFLE1BRG9CO0FBQ0M7QUFDM0JDLEVBQUFBLEtBQUssRUFBRSxNQUZtQjtBQUVFO0FBQzVCQyxFQUFBQSxNQUFNLEVBQUUsQ0FBQyxLQUFELENBSGtCO0FBR0Q7QUFDekJDLEVBQUFBLFVBQVUsRUFBRSxhQUpjO0FBSUU7QUFDNUJDLEVBQUFBLGFBQWEsRUFBRSxDQUxXO0FBS0U7QUFDNUJDLEVBQUFBLFVBQVUsRUFBRSxDQU5jO0FBTUU7QUFDNUJDLEVBQUFBLEtBQUssRUFBRSxJQVBtQjtBQU9FO0FBQzVCQyxFQUFBQSxTQUFTLEVBQUUsR0FSZTtBQVFFO0FBQzVCQyxFQUFBQSxRQUFRLEVBQUUsQ0FBQyxLQUFELEVBQVEsTUFBUixDQVRnQjtBQVNZO0FBQ3RDQyxFQUFBQSxtQkFBbUIsRUFBRSxLQVZLO0FBVUU7QUFDNUJDLEVBQUFBLGtCQUFrQixFQUFFLEtBWE07QUFXRTtBQUM1QkMsRUFBQUEsR0FBRyxFQUFFLE1BWnFCLENBWUU7O0FBWkYsQ0FBM0I7O0FBZUEsTUFBTUMsR0FBRyxHQUFHLE1BQU07QUFDZCxRQUFNO0FBQUVDLElBQUFBO0FBQUYsTUFBV2xCLE1BQU0sRUFBdkI7QUFDQSxRQUFNLENBQUNtQixDQUFELEVBQUlDLElBQUosSUFBWXZCLEtBQUssQ0FBQ3dCLFFBQU4sQ0FBZSxDQUFmLENBQWxCO0FBQ0EsUUFBTSxDQUFDQyxDQUFELEVBQUlDLElBQUosSUFBWTFCLEtBQUssQ0FBQ3dCLFFBQU4sQ0FBZSxDQUFmLENBQWxCO0FBRUF0QixFQUFBQSxRQUFRLENBQUMsQ0FBQ3lCLEtBQUQsRUFBUUMsR0FBUixLQUFnQjtBQUNyQixRQUFJRCxLQUFLLEtBQUssR0FBZCxFQUFtQjtBQUNmTixNQUFBQSxJQUFJO0FBQ1A7O0FBRUQsUUFBSU8sR0FBRyxDQUFDQyxTQUFSLEVBQW1CO0FBQ2ZOLE1BQUFBLElBQUksQ0FBQ08sSUFBSSxDQUFDQyxHQUFMLENBQVMsQ0FBVCxFQUFZVCxDQUFDLEdBQUcsQ0FBaEIsQ0FBRCxDQUFKO0FBQ0g7O0FBRUQsUUFBSU0sR0FBRyxDQUFDSSxVQUFSLEVBQW9CO0FBQ2hCVCxNQUFBQSxJQUFJLENBQUNPLElBQUksQ0FBQ0csR0FBTCxDQUFTLEVBQVQsRUFBYVgsQ0FBQyxHQUFHLENBQWpCLENBQUQsQ0FBSjtBQUNIOztBQUVELFFBQUlNLEdBQUcsQ0FBQ00sT0FBUixFQUFpQjtBQUNiUixNQUFBQSxJQUFJLENBQUNJLElBQUksQ0FBQ0MsR0FBTCxDQUFTLENBQVQsRUFBWU4sQ0FBQyxHQUFHLENBQWhCLENBQUQsQ0FBSjtBQUNIOztBQUVELFFBQUlHLEdBQUcsQ0FBQ08sU0FBUixFQUFtQjtBQUNmVCxNQUFBQSxJQUFJLENBQUNJLElBQUksQ0FBQ0csR0FBTCxDQUFTLEVBQVQsRUFBYVIsQ0FBQyxHQUFHLENBQWpCLENBQUQsQ0FBSjtBQUNIO0FBQ0osR0FwQk8sQ0FBUjtBQXNCQSxzQkFDSSxvQkFBQyxHQUFEO0FBQUssSUFBQSxhQUFhLEVBQUM7QUFBbkIsa0JBSUksb0JBQUMsSUFBRCxnRUFKSixlQUtJLG9CQUFDLEdBQUQ7QUFBSyxJQUFBLE1BQU0sRUFBRSxFQUFiO0FBQWlCLElBQUEsV0FBVyxFQUFFSCxDQUE5QjtBQUFpQyxJQUFBLFVBQVUsRUFBRUc7QUFBN0Msa0JBQ0ksb0JBQUMsSUFBRCx1QkFESixDQUxKLENBREo7QUFXSCxDQXRDRDs7QUF3Q0FXLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmpCLEdBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmNvbnN0IHsgdXNlSW5wdXQsIHVzZUFwcCwgVGV4dCwgQm94IH0gPSByZXF1aXJlKFwiaW5rXCIpO1xuLy8gY29uc3QgQmlnVGV4dCA9IHJlcXVpcmUoXCJpbmstYmlnLXRleHRcIik7XG4vLyBjb25zdCBHcmFkaWVudCA9IHJlcXVpcmUoXCJpbmstZ3JhZGllbnRcIik7XG5jb25zdCBDRm9udHMgPSByZXF1aXJlKCdjZm9udHMnKTtcblxuQ0ZvbnRzLnNheSgnU25ha2UgRGVsdXhlJywge1xuXHRmb250OiAndGlueScsICAgICAgICAgICAgICAvLyBkZWZpbmUgdGhlIGZvbnQgZmFjZVxuXHRhbGlnbjogJ2xlZnQnLCAgICAgICAgICAgICAgLy8gZGVmaW5lIHRleHQgYWxpZ25tZW50XG5cdGNvbG9yczogWydyZWQnXSwgICAgICAgICAvLyBkZWZpbmUgYWxsIGNvbG9yc1xuXHRiYWNrZ3JvdW5kOiAndHJhbnNwYXJlbnQnLCAgLy8gZGVmaW5lIHRoZSBiYWNrZ3JvdW5kIGNvbG9yLCB5b3UgY2FuIGFsc28gdXNlIGBiYWNrZ3JvdW5kQ29sb3JgIGhlcmUgYXMga2V5XG5cdGxldHRlclNwYWNpbmc6IDEsICAgICAgICAgICAvLyBkZWZpbmUgbGV0dGVyIHNwYWNpbmdcblx0bGluZUhlaWdodDogNCwgICAgICAgICAgICAgIC8vIGRlZmluZSB0aGUgbGluZSBoZWlnaHRcblx0c3BhY2U6IHRydWUsICAgICAgICAgICAgICAgIC8vIGRlZmluZSBpZiB0aGUgb3V0cHV0IHRleHQgc2hvdWxkIGhhdmUgZW1wdHkgbGluZXMgb24gdG9wIGFuZCBvbiB0aGUgYm90dG9tXG5cdG1heExlbmd0aDogJzAnLCAgICAgICAgICAgICAvLyBkZWZpbmUgaG93IG1hbnkgY2hhcmFjdGVyIGNhbiBiZSBvbiBvbmUgbGluZVxuXHRncmFkaWVudDogWydyZWQnLCAnYmx1ZSddLCAgICAgICAgICAgIC8vIGRlZmluZSB5b3VyIHR3byBncmFkaWVudCBjb2xvcnNcblx0aW5kZXBlbmRlbnRHcmFkaWVudDogZmFsc2UsIC8vIGRlZmluZSBpZiB5b3Ugd2FudCB0byByZWNhbGN1bGF0ZSB0aGUgZ3JhZGllbnQgZm9yIGVhY2ggbmV3IGxpbmVcblx0dHJhbnNpdGlvbkdyYWRpZW50OiBmYWxzZSwgIC8vIGRlZmluZSBpZiB0aGlzIGlzIGEgdHJhbnNpdGlvbiBiZXR3ZWVuIGNvbG9ycyBkaXJlY3RseVxuXHRlbnY6ICdub2RlJyAgICAgICAgICAgICAgICAgLy8gZGVmaW5lIHRoZSBlbnZpcm9ubWVudCBDRm9udHMgaXMgYmVpbmcgZXhlY3V0ZWQgaW5cbn0pO1xuXG5jb25zdCBBcHAgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBleGl0IH0gPSB1c2VBcHAoKTtcbiAgICBjb25zdCBbeCwgc2V0WF0gPSBSZWFjdC51c2VTdGF0ZSgxKTtcbiAgICBjb25zdCBbeSwgc2V0WV0gPSBSZWFjdC51c2VTdGF0ZSgxKTtcblxuICAgIHVzZUlucHV0KChpbnB1dCwga2V5KSA9PiB7XG4gICAgICAgIGlmIChpbnB1dCA9PT0gXCJxXCIpIHtcbiAgICAgICAgICAgIGV4aXQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChrZXkubGVmdEFycm93KSB7XG4gICAgICAgICAgICBzZXRYKE1hdGgubWF4KDEsIHggLSAxKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoa2V5LnJpZ2h0QXJyb3cpIHtcbiAgICAgICAgICAgIHNldFgoTWF0aC5taW4oMjAsIHggKyAxKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoa2V5LnVwQXJyb3cpIHtcbiAgICAgICAgICAgIHNldFkoTWF0aC5tYXgoMSwgeSAtIDEpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChrZXkuZG93bkFycm93KSB7XG4gICAgICAgICAgICBzZXRZKE1hdGgubWluKDEwLCB5ICsgMSkpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8Qm94IGZsZXhEaXJlY3Rpb249XCJjb2x1bW5cIj5cblx0XHRcdHsvKiA8R3JhZGllbnQgbmFtZT1cInJhaW5ib3dcIj5cblx0XHRcdFx0PEJpZ1RleHQgdGV4dD1cInNuYWtlIGRlbHV4ZVwiLz5cblx0XHRcdDwvR3JhZGllbnQ+ICovfVxuICAgICAgICAgICAgPFRleHQ+VXNlIGFycm93IGtleXMgdG8gbW92ZSB0aGUgaWNvbi4gUHJlc3MgXCJxXCIgdG8gZXhpdC48L1RleHQ+XG4gICAgICAgICAgICA8Qm94IGhlaWdodD17MTJ9IHBhZGRpbmdMZWZ0PXt4fSBwYWRkaW5nVG9wPXt5fT5cbiAgICAgICAgICAgICAgICA8VGV4dD7wn5iBPC9UZXh0PlxuICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgIDwvQm94PlxuICAgICk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcDtcbiJdfQ==